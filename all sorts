// Online C++ compiler to run C++ program online
// Bubble sort - o(n2)
// swap consecutively two elements
// at the end last element will be on position
// #include <iostream>
// #include <vector>
// using namespace std;
// int main() {
   
//   vector <int> v = {5, 1, 4, 2, 8};
//   int n = v.size();
//   for(int i=0 ; i<n-1; i++){
//       for(int j=0; j<n-i-1 ; j++){
//         if (v[j] > v[j + 1]) { 
//                 swap(v[j], v[j + 1]); 
//             }
//       }
//   }
//   for(int i=0 ; i<n ; i++){
//       cout << v[i] << " ";
//   }
//     return 0;
// }

// insertion sort - o(n2) , o(n) (if already sorted)
// compare one element with its all the previous element
// #include <iostream>
// #include <vector>
// using namespace std;
// int main() {
   
//   vector <int> v = {5, 1, 4, 2, 8};
//   int n = v.size();
//   for(int i=1 ; i<n; i++){
//       int element = v[i];
//       int j = i-1;
// // compare element with each element 
//       while(j>=0 && v[j] > element){
//         v[j+1] = v[j];
//         j = j-1;
//       }
//       v[j+1] = element;
//   }
//   for(int i=0 ; i<n ; i++){
//       cout << v[i] << " ";
//   }
//     return 0;
// }

// selection sort - O(n²)
 // swap it with sabse end wala small element
// #include <iostream>
// #include <vector>
// using namespace std;
// int main() {
//     vector <int> v = {5, 1, 4, 2, 8};
//   int n = v.size();
//         for(int i=0 ; i<n ; i++){
//              int mini = i;
//             
//             for(int j=i; j<n ; j++){
//                 if(v[j] < v[mini]){
//                     mini = j;
//                 }
//             }
//             swap(v[i],v[mini]);
//         }
//         for(int i=0 ; i<n ; i++){
//   cout << v[i] << " ";
//   }
//         return 0;
// }

// quick sort - O(n log n) on average, O(n²) worst-case
// #include <iostream>
// #include <vector>
// using namespace std;

// int partition(vector<int> &nums, int low, int high){
//     int pivot = nums[low];
//     int i = 0;
//     int j = high;
    
//     while(i < j){
//         while(nums[i] <= pivot && i<=high-1){
//             i++;
//         }
        
//         while(nums[j] > pivot && j >=low+1){
//             j--;
//         }
//         if(i<j) swap(nums[i],nums[j]);
//     }
//     swap(nums[low] , nums[j]);
//     return j;
// }
// void qs(vector<int> &arr, int low, int high) {
//     if (low < high) {
//       int pIndex = partition(arr, low, high);
//       qs(arr, low, pIndex - 1);
//       qs(arr, pIndex + 1, high);
//   }
// }

// int main() {
//     vector <int> v = {5, 1, 4, 2, 8};
//   int n = v.size();
//       qs(v, 0,  n-1) ;  
//         for(int i=0 ; i<n ; i++){
//   cout << v[i] << " ";
//   }
//         return 0;
// }

// #include <iostream>
// #include <vector>
// using namespace std;
 // O(n log n)
// void merge(vector<int> &nums, int low, int mid, int high) {
//     vector <int> temp;
//     int i = low;
//     int j = mid+1;
    
    
//     while(i <= mid && j <= high){
//         if(nums[i] <= nums[j]){
//             temp.push_back(nums[i]);
//             i++;
//         }
//         else{
//             temp.push_back(nums[j]);
//             j++;
//         }
// }
// while(i<=mid){
//     temp.push_back(nums[i]);
//     i++;
// }
//  while(j <= high){
//       temp.push_back(nums[j]);
//       j++;
//       }
//  for (int k = low ; k <= high; k++) {
//      nums[k] = temp[k- low];
//     }
// }
// void mergeSort(vector<int> &arr, int low, int high) {
//     if (low >= high) return;
//     int mid = (low + high) / 2 ;
//     mergeSort(arr, low, mid);  
//  mergeSort(arr, mid + 1, high);
//      merge(arr, low, mid, high); 
// }
// int main() {
//     vector <int> v = {5, 1, 4, 2, 8};
//   int n = v.size();
//         mergeSort(v,0,n-1);
//         for(int i=0 ; i<n ; i++){
//   cout << v[i] << " ";
//   }
//         return 0;
// }

